using System;
using System.Collections.Generic;
using System.Text;

using TradingBlockApiTestHarness.DTO.Enums;
using TradingBlockApiTestHarness.DTO.Order;

namespace TradingBlockApiTestHarness.DTO.Orders
{
    public class Order
    {
        /// <summary>
        /// The class of the order, such as Single or Spread.
        /// </summary>
        public enumOrderClass OrderClass { get; set; }

        /// <summary>
        /// Each individual leg(s)' details.
        /// </summary>
        public List<OrderLeg> Legs { get; set; }

        /// <summary>
        /// Specific account this order belongs to.
        /// </summary>
        public int AccountId { get; set; }

        /// <summary>
        /// Specific sub-account within the given account that this order
        /// belongs to. Zero if the account does not have any sub-accounts.
        /// </summary>
        public int SubaccountId { get; set; }

        /// <summary>
        /// External reference id that you can use to differentiate multiple
        /// request responses sent within a short period of time from another.
        /// </summary>
        public int? ClientRefId { get; set; }

        /// <summary>
        /// Required for all follow-up requests for a given order, and
        /// required to be zero when placing new orders, this is the distinct
        /// order id in TradingBlock's system for this given order. This
        /// order id is generated by TradingBlock.
        /// </summary>
        public int? OrderId { get; set; }

        /// <summary>
        /// Current status of an order. This will be set by TradingBlock when
        /// requesting the status of an order.
        /// </summary>
        public enumOrderStatus? OrderStatus { get; set; }

        /// <summary>
        /// Order duration, such as Day or Good-'Till-Cancelled
        /// </summary>
        public enumOrderDuration Duration { get; set; }

        /// <summary>
        /// Only used for option orders, underlying symbol is the underlying
        /// deliverable's symbol. Should be null for all other order types.
        /// </summary>
        public string UnderlyingSymbol { get; set; }

        /// <summary>
        /// Timestamp of when this order was last modified by a client,
        /// TradingBlock, or the exchange.
        /// </summary>
        public DateTime? Date { get; set; }

        /// <summary>
        /// Order quantity. For spreads, this is the spread quantity (ex a
        /// 2:2 vertical would have order quantity 2).
        /// </summary>
        public double Quantity { get; set; }

        /// <summary>
        /// Quantity of this order that has filled. This will only be generated
        /// by TradingBlock.
        /// </summary>
        public double? FillQuantity { get; set; }

        /// <summary>
        /// Type of the order such as Market or Limit.
        /// </summary>
        public enumOrderType OrderType { get; set; }

        /// <summary>
        /// Limit price of this order, if applicable (limit order)
        /// </summary>
        public decimal? Price { get; set; }

        /// <summary>
        /// Stop price of this order, if applicable (stop order)
        /// </summary>
        public decimal? Stop { get; set; }

        /// <summary>
        /// Whether or not this order is an "all or none" order. All or none orders
        /// can ONLY be completely filled at once at the exchange; they will never be
        /// partially filled.
        /// </summary>
        public bool AllOrNone { get; set; }

        /// <summary>
        /// Whether the order's limit is placed as a debit or credit. Only applicable
        /// to spread orders.
        /// </summary>
        public enumDebitCredit? DebitCredit { get; set; }

        /// <summary>
        /// Short description of this order. This will be generated by TradingBlock.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Average price of all fills for the order
        /// </summary>
        public decimal? AverageFillPrice { get; set; }

        /// <summary>
        /// Whether or not to bypass order warnings and allow trade to go through.
        /// Note that this only affects trade warnings, not trade validation errors.
        /// </summary>
        public bool? BypassWarnings { get; set; }

        /// <summary>
        /// Collection of order events the order has gone through (i.e. New -> Replaced -> Filled)
        /// </summary>
        public List<OrderEvent> OrderEvents { get; set; }

        public enumStrategyType StrategyType { get; set; }

        /// <summary>
        /// Admin Property
        /// Three possible values 0-'Unsolicited',1-'Solicited',2-'Discretionary'
        /// </summary>
        public enumPlacedAs PlacedAs { get; set; }

        /// <summary>
        /// Admin Property
        /// Two possible values 0-'Agent',1-'Principal'
        /// </summary>
        public enumExecutedAs ExecutedAs { get; set; }

        /// <summary>
        /// Admin Property
        /// Three possible values 0-'Online',1-'Assisted',2-'Override'
        /// </summary>
        public enumCommissionType CommissionType { get; set; }

        public Order()
        {
            Legs = new List<OrderLeg>();
            OrderEvents = new List<OrderEvent>();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder(base.ToString());
            sb.Append(" - OrderClass:").Append(OrderClass);
            sb.Append("; AccountId:").Append(AccountId);
            sb.Append("; SubaccountId:").Append(SubaccountId);
            sb.Append("; ClientRefId:").Append(ClientRefId);
            sb.Append("; OrderId:").Append(OrderId);
            sb.Append("; OrderStatus:").Append(OrderStatus);
            sb.Append("; Duration:").Append(Duration);
            sb.Append("; UnderlyingSymbol:").Append(UnderlyingSymbol);
            sb.Append("; Date:").Append(Date);
            sb.Append("; Quantity:").Append(Quantity);
            sb.Append("; FillQuantity:").Append(FillQuantity);
            sb.Append("; OrderType:").Append(OrderType);
            sb.Append("; Price:").Append(Price);
            sb.Append("; Stop:").Append(Stop);
            sb.Append("; AllOrNone:").Append(AllOrNone);
            sb.Append("; DebitCredit:").Append(DebitCredit);
            sb.Append("; Description:").Append(Description);
            sb.Append("; AverageFillPrice:").Append(AverageFillPrice);
            sb.Append("; BypassWarnings:").Append(BypassWarnings);
            sb.Append("; Legs:").Append(Legs != null ? Legs.ToStringExtended() : null);
            sb.Append("; OrderEvents:").Append(OrderEvents != null ? OrderEvents.ToStringExtended() : null);
            return sb.ToString();
        }
    }
}
